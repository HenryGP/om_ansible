---
- name: Generate 4096 bits, RSA private keys
  openssl_privatekey:
    path: /root/files/ssl/{{ item }}.key
  with_items:
    - omserver
    - n1
    - n2
    - n3
    - bkp
    - kmip
    - ldapserver
    - queryable

- name: Create certificate signing request (CSR) for client X.509 certificates
  openssl_csr:
    path: /root/files/ssl/{{ item }}_client.csr
    privatekey_path: /root/files/ssl/{{ item }}.key
    subject:
      domainComponent: "CLIENT AUTH"
      organizationName: "MongoDB"
      organizationalUnitName: "Technical Services"
      commonName: "{{ item }}-client-x509-certificate"
    extended_key_usage: clientAuth
  with_items:
    - n1
    - n2
    - n3
    - omserver
    - kmip

- name: Create certificate signing request (CSR) for server X.509 certificates
  openssl_csr:
    path: /root/files/ssl/{{ item }}_server.csr
    privatekey_path: /root/files/ssl/{{ item }}.key
    subject:
      domainComponent: "SERVER AUTH"
      organizationName: "MongoDB"
      organizationalUnitName: "Technical Services"
      commonName: "{{ item }}-server-x509-certificate"
    subject_alt_name: "DNS:{{ item }},DNS:*.omansible.int"
    extended_key_usage: serverAuth
  with_items:
    - omserver
    - n1
    - n2
    - n3
    - bkp
    - kmip
    - ldapserver

- name: Create certificate signing request (CSR) for Replica Set membership authentication (`net.tls.clusterFile`) (X.509 certificates with clientAuth + serverAuth)
  openssl_csr:
    path: /root/files/ssl/{{ item }}_member_auth.csr
    privatekey_path: /root/files/ssl/{{ item }}.key
    subject:
      domainComponent: "REPLICA SET MEMBERSHIP AUTH"
      organizationName: "MongoDB"
      organizationalUnitName: "Technical Services"
      commonName: "{{ item }}-member-auth-x509-certificate"
    subject_alt_name: "DNS:{{ item }},DNS:*.omansible.int"
    extended_key_usage:
      - serverAuth
      - clientAuth
  with_items:
    - n1
    - n2
    - n3

- name: Create certificate signing request (CSR) for server X.509 certificates (queryable backup)
  openssl_csr:
    path: /root/files/ssl/{{ item }}_server.csr
    privatekey_path: /root/files/ssl/{{ item }}.key
    subject:
      domainComponent: "SERVER AUTH"
      organizationName: "MongoDB"
      organizationalUnitName: "Technical Services"
      commonName: "{{ item }}-server-x509-certificate"
    subject_alt_name: "DNS:omserver.omansible.int,DNS:*.omansible.int"
    keyUsage: digitalSignature
    extended_key_usage: serverAuth
  with_items:
    - queryable

- name: Generate an OpenSSL certificate for clients signed with om_ansible CA
  openssl_certificate:
    path: /root/files/ssl/{{ item }}_client.crt
    csr_path: /root/files/ssl/{{ item }}_client.csr
    ownca_path: /root/files/ssl/ca.pem
    ownca_privatekey_path: /root/files/ssl/ca.pem
    ownca_not_after: +825d
    provider: ownca
  with_items:
    - n1
    - n2
    - n3
    - omserver
    - kmip

- name: Generate an OpenSSL certificate for servers signed with om_ansible CA
  openssl_certificate:
    path: /root/files/ssl/{{ item }}_server.crt
    csr_path: /root/files/ssl/{{ item }}_server.csr
    ownca_path: /root/files/ssl/ca.pem
    ownca_privatekey_path: /root/files/ssl/ca.pem
    ownca_not_after: +825d
    provider: ownca
  with_items:
    - omserver
    - n1
    - n2
    - n3
    - bkp
    - kmip
    - ldapserver
    - queryable

- name: Generate X.509 certificate for Replica Set membership authentication (`net.tls.clusterFile`) (X.509 certificates with clientAuth + serverAuth) signed by our Root CA
  openssl_certificate:
    path: /root/files/ssl/{{ item }}_member_auth.crt
    csr_path: /root/files/ssl/{{ item }}_member_auth.csr
    ownca_path: /root/files/ssl/ca.pem
    ownca_privatekey_path: /root/files/ssl/ca.pem
    ownca_not_after: +825d
    provider: ownca
  with_items:
    - n1
    - n2
    - n3

- name: Checking if client pem file exists
  stat: 
    path: /root/files/ssl/{{ item }}_client.pem
  register: clientpemstat
  with_items:
    - n1
    - n2
    - n3
    - omserver
    - kmip

- debug:
    msg: File exists {{ item.stat.path }}
    verbosity: 2
  with_items: "{{ clientpemstat.results }}"
  when: item.stat.exists == true

- name: Get information on existing client pem files keys
  openssl_privatekey_info:
    path: "{{ item.stat.path }}"
  register: clientkeyresult
  with_items: "{{ clientpemstat.results }}"
  when: item.stat.exists == true

- debug:
    var: clientkeyresult
    verbosity: 2

- name: Get information on existing client pem files certs
  openssl_certificate_info:
    path: "{{ item.stat.path }}"
  register: clientcertresult
  with_items: "{{ clientpemstat.results }}"
  when: item.stat.exists == true

- debug:
    var: clientcertresult
    verbosity: 2

- debug:
    msg: Debug cert = {{ clientcertresult.results[item == item.item] }} and key = {{ clientkeyresult.results[item == item.item] }}
    verbosity: 3
  with_items: "{{ clientpemstat.results }}"
  when: item.stat.exists == true

# - assert:
#     that:
#       - "{{ clientcertresult.results[item == item.item].public_key == clientkeyresult.results[item == item.item].public_key }}"
#   with_items: "{{ clientpemstat.results }}"
#   when: item.stat.exists == true

- name: Create client PEM file
  copy:
    src: /root/files/ssl/{{ item.item }}_client.crt
    dest: /root/files/ssl/{{ item.item }}_client.pem
  with_items: "{{ clientpemstat.results }}"
  when: item.stat.exists == false

- name: Client cert + key concatenation
  lineinfile:
    dest: /root/files/ssl/{{ item.item }}_client.pem
    regexp: ^-----BEGIN RSA PRIVATE KEY-----((.|\n)*)-----END RSA PRIVATE KEY-----\Z
    line: "{{ lookup('file', '/root/files/ssl/{{ item.item }}.key') }}"
  with_items: "{{ clientpemstat.results }}"
  when: item.stat.exists == false

- name: Checking if server pem file exists
  stat:
    path: /root/files/ssl/{{ item }}_server.pem
  register: serverpemstat
  with_items:
    - omserver
    - n1
    - n2
    - n3
    - bkp
    - kmip
    - ldapserver
    - queryable

- debug:
    msg: File exists {{ item.stat.path }}
    verbosity: 2
  with_items: "{{ serverpemstat.results }}"
  when: item.stat.exists == true

- name: Get information on existing server pem files keys
  openssl_privatekey_info:
    path: "{{ item.stat.path }}"
  register: serverkeyresult
  with_items: "{{ serverpemstat.results }}"
  when: item.stat.exists == true

- debug:
    var: serverkeyresult
    verbosity: 2

- name: Get information on existing server pem files certs
  openssl_certificate_info:
    path: "{{ item.stat.path }}"
  register: servercertresult
  with_items: "{{ serverpemstat.results }}"
  when: item.stat.exists == true

- debug:
    var: servercertresult
    verbosity: 2

- debug:
    msg: Debug cert = {{ servercertresult.results[item == item.item] }} and key = {{ serverkeyresult.results[item == item.item] }}
    verbosity: 3
  with_items: "{{ serverpemstat.results }}"
  when: item.stat.exists == true

# - assert:
#     that:
#       - servercertresult.results[item == item.item].public_key == serverkeyresult.results[item == item.item].public_key
#   with_items: "{{ serverpemstat.results }}"
#   when: item.stat.exists == true

- name: Create server PEM file
  copy:
    src: /root/files/ssl/{{ item.item }}_server.crt
    dest: /root/files/ssl/{{ item.item }}_server.pem
  with_items: "{{ serverpemstat.results }}"
  when: item.stat.exists == false

- name: Server cert + key concatenation
  lineinfile:
    dest: /root/files/ssl/{{ item.item }}_server.pem
    regexp: ^-----BEGIN RSA PRIVATE KEY-----((.|\n)*)-----END RSA PRIVATE KEY-----\Z
    line: "{{ lookup('file', '/root/files/ssl/{{ item.item }}.key') }}"
  with_items: "{{ serverpemstat.results }}"
  when: item.stat.exists == false

- name: Checking if internal pem file exists
  stat:
    path: /root/files/ssl/{{ item }}_member_auth.pem
  register: internalpemstat
  with_items:
    - n1
    - n2
    - n3

- debug:
    msg: File exists {{ item.stat.path }}
    verbosity: 2
  with_items: "{{ internalpemstat.results }}"
  when: item.stat.exists == true

- name: Get information on existing internal pem files keys
  openssl_privatekey_info:
    path: "{{ item.stat.path }}"
  register: internalkeyresult
  with_items: "{{ internalpemstat.results }}"
  when: item.stat.exists == true

- debug:
    var: internalkeyresult
    verbosity: 2

- name: Get information on existing internal pem files certs
  openssl_certificate_info:
    path: "{{ item.stat.path }}"
  register: internalcertresult
  with_items: "{{ internalpemstat.results }}"
  when: item.stat.exists == true

- debug:
    var: internalcertresult
    verbosity: 2

- debug:
    msg: Debug cert = {{ internalcertresult.results[item == item.item] }} and key = {{ internalkeyresult.results[item == item.item] }}
    verbosity: 3
  with_items: "{{ internalpemstat.results }}"
  when: item.stat.exists == true

# - assert:
#     that:
#       - "{{ internalcertresult.results[item == item.item].public_key == internalkeyresult.results[item == item.item].public_key }}"
#   with_items: "{{ internalpemstat.results }}"
#   when: item.stat.exists == true

- name: Create internal PEM file
  copy:
    src: /root/files/ssl/{{ item.item }}_member_auth.crt
    dest: /root/files/ssl/{{ item.item }}_member_auth.pem
  with_items: "{{ internalpemstat.results }}"
  when: item.stat.exists == false

- name: Internal cert + key concatenation
  lineinfile:
    dest: /root/files/ssl/{{ item.item }}_member_auth.pem
    regexp: ^-----BEGIN RSA PRIVATE KEY-----((.|\n)*)-----END RSA PRIVATE KEY-----\Z
    line: "{{ lookup('file', '/root/files/ssl/{{ item.item }}.key') }}"
  with_items: "{{ internalpemstat.results }}"
  when: item.stat.exists == false
