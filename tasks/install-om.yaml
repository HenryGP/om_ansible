---
- name: "Install Postfix smtp server"
  yum:
    name: postfix
    state: present

- name: "Configuring Postfix"
  lineinfile:
    path: /etc/postfix/main.cf
    regexp: '^inet_protocols =.*'
    line: 'inet_protocols = ipv4'    

- name: "Starting Postfix"
  service:
    name: postfix
    enabled: yes
    state: restarted

# Looking the Ops manager link based on the OM version requested in om_version

- name: "Looking for OM version"
  uri:
    url: "https://s3.amazonaws.com/info-mongodb-com/com-download-center/ops_manager_{{om_version}}.json"
    method: GET
    return_content: yes
    status_code: 200
    body_format: json
  register: json_om_version 
  when: om_version is defined

- set_fact:
    platform_query: "platform[?arch=='x86_64']"
    package_format_query: "[?package_format=='rpm'].packages"
    link_query: "links[?name=='rpm'].download_link"
  when: om_version is defined

- set_fact:
    om_packages: "{{json_om_version.json | json_query(platform_query) | json_query(package_format_query) }}"
  when: om_version is defined

# for 4.2.x responsed, packages is a doc, while in lower versions, it's a array
- set_fact:
    om_packages: "{{om_packages[0]}}"
  when: om_packages[0][0] is defined

- set_fact:
    om_links: "{{ om_packages[0] | json_query(link_query) }}"
  when: om_version is defined

# Only set the om_download_url variable if it is not already set in the vars file
# This is for the om_download_url take precedence over om_version 
# in case a specific build is needed.

- set_fact:
    om_download_url: "{{ om_links[0] }}"
  when: om_download_url is not defined

- name: "Download Ops Manager RPM"
  get_url:
    url: "{{om_download_url}}"
    dest: /tmp/mongodb-mms.rpm
    force_basic_auth: yes
  when: not local_mode

- name: "Copy the local installer"
  copy: 
    src="../files/mongodb-mms.rpm"
    dest="/tmp/mongodb-mms.rpm"
    owner=root 
    group=root 
    mode="u=rwx,g=r,o=r"
  when: local_mode

- name: "Install the RPM"
  yum:
    name: /tmp/mongodb-mms.rpm
    state: present
- name: "Enable mongodb-mms service"
  service:
    name: mongodb-mms
    enabled: yes

- name: "Create directory for head database"
  file: path=/data/head state=directory mode=0755 owner=mongodb-mms group=mongodb-mms

- name: "Create directory for fsstore"
  file: path=/data/fsstore state=directory mode=0755 owner=mongodb-mms group=mongodb-mms

# - name: Modify startup config to speedup process
#   replace:
#     path: /opt/mongodb/mms/conf/mms.conf
#     regexp: '^JAVA_MMS_UI_OPTS="\${JAVA_MMS_UI_OPTS} -Dxgen\.webServerGzipEnabled=true.*'
#     replace: 'JAVA_MMS_UI_OPTS="${JAVA_MMS_UI_OPTS} -Dxgen.webServerGzipEnabled=true -Dskip.migrate=true -Dskip.agent.download=true -Dskip.clear.lock=true"'

- name: "Set hostname for OM processes"
  blockinfile:
    path: /opt/mongodb/mms/conf/mms.conf
    block: |
      JAVA_MMS_UI_OPTS="${JAVA_MMS_UI_OPTS} -Dmms.system.hostname=$(hostname -f)"
      JAVA_DAEMON_OPTS="${JAVA_DAEMON_OPTS} -Dmms.system.hostname=$(hostname -f)"

- name: Adding centralUrl to configuration
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.centralUrl=.*'
    line: 'mms.centralUrl={{ om_url }}'

- name: Adding server PEM file to configuration
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.https.PEMKeyFile=.*'
    line: 'mms.https.PEMKeyFile=/certs/omserver_server.pem'    
  when: om_https

- name: Replacing mongoUri
  replace:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mongo.mongoUri=.*'
    replace: 'mongo.mongoUri=mongodb://omserver.omansible.int:27017'

- name: Adding mms.fromEmailAddr
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.fromEmailAddr='
    line: mms.fromEmailAddr=mongodb-mms@omserver.omansible.int

- name: Adding mms.adminEmailAddr
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.adminEmailAddr='
    line: mms.adminEmailAddr=mongodb-mms@omserver.omansible.int

- name: Adding mms.replyToEmailAddr
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.replyToEmailAddr='
    line: mms.replyToEmailAddr=mongodb-mms@omserver.omansible.int

- name: Adding mms.adminEmailAddr
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.adminEmailAddr='
    line: mms.adminEmailAddr=mongodb-mms@omserver.omansible.int

- name: Adding mms.emailDaoClass
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.emailDaoClass='
    line: mms.emailDaoClass=com.xgen.svc.core.dao.email.JavaEmailDao

- name: Adding mms.mail.transport
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.mail.transport='
    line: mms.mail.transport=smtp

- name: Adding mms.mail.hostname
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.mail.hostname='
    line: mms.mail.hostname=localhost

- name: Adding mms.mail.port
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.mail.port='
    line: mms.mail.port=25
    
- name: Adding mms.ignoreInitialUiSetup
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.ignoreInitialUiSetup='
    line: mms.ignoreInitialUiSetup=true

- name: Adding mongodb.release.autoDownload
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mongodb.release.autoDownload='
    line: mongodb.release.autoDownload=true

- name: Adding mongodb.release.autoDownload.enterprise
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mongodb.release.autoDownload.enterprise='
    line: mongodb.release.autoDownload.enterprise=true

- name: Adding brs.queryable.pem
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^brs.queryable.pem='
    line: brs.queryable.pem=/certs/queryable.pem

- name: Adding brs.queryable.lruCacheCapacityMB
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^brs.queryable.lruCacheCapacityMB='
    line: brs.queryable.lruCacheCapacityMB=256

- name: Adding mms.preflight.run
  lineinfile:
    path: /opt/mongodb/mms/conf/conf-mms.properties
    regexp: '^mms.preflight.run='
    line: mms.preflight.run=true

- name: "Create conf dir to increase SystemD timeout for mongodb-mms service"
  file:
    path: /etc/systemd/system/mongodb-mms.service.d
    state: directory

- name: "Increase SystemD timeout for mongodb-mms service"
  copy:
    content: "[Service]\nTimeoutStartSec=900"
    dest: "/etc/systemd/system/mongodb-mms.service.d/increase-timeout.conf"

- name: "Start mongodb-mms service"
  systemd:
    state: restarted
    daemon_reload: yes
    enabled: yes
    name: mongodb-mms.service

- name: "Wait for port 8080 to become available"
  wait_for:
    port: 8080
    timeout: 900
  when: not om_https

- name: "Wait for port 8443 to become available"
  wait_for:
    port: 8443
    timeout: 900
  when: om_https

- name: Check that admin_user_api_key.yaml exists
  local_action: stat path=/root/vars/admin_user_api_key.yaml
  register: admin_api_key_file

- name: "Check if the initial user has been created"
  uri:
    url: "{{ om_url }}/api/public/v1.0/users/byName/admin"
    method: GET
    validate_certs: no
    follow_redirects: all
    headers:
      Content-Type: "application/json"
    status_code: 200
    return_content: yes
    user: admin
    password: "{{ api_key }}"
  register: user_exists
  when: admin_api_key_file.stat.exists == true

- name: "Create initial user"
  uri:
    url: "{{ om_url }}/api/public/v1.0/unauth/users?pretty=true&whitelist=192.168.1.0/24"
    method: POST
    validate_certs: no
    follow_redirects: all
    headers:
      Content-Type: "application/json"
    body_format: json
    status_code: 201
    body: "{{first_user_api_call}}"
    return_content: yes
  register: user_create_result
  when: admin_api_key_file.stat.exists == false

- name: Saving API key for admin user in local server
  local_action: copy content={{user_create_result.json.apiKey}} dest=/root/vars/admin_user_api_key.yaml
  when: admin_api_key_file.stat.exists == false

- name: Check that group_id.yaml exists
  local_action: stat path=/root/vars/group_id.yaml
  register: group_id_file

- name: "Create initial group"
  uri:
    url: "{{ om_url }}/api/public/v1.0/groups?pretty=true"
    validate_certs: no
    method: POST
    headers:
      Content-Type: "application/json"
    body_format: json
    body: '{"name": "Initial group"}'
    status_code: 201
    return_content: yes
    user: admin
    password: "{{user_create_result.json.apiKey}}"
  when: group_id_file.stat.exists == false and admin_api_key_file.stat.exists == false
  register: project

- name: Saving API key for admin user in local server
  local_action: copy content={{project.json.id}} dest=/root/vars/group_id.yaml
  when: group_id_file.stat.exists == false
